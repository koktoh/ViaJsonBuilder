@page "/builder"
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject KeyboardConfigInfoExtractor Extractor
@inject ViaBuilder ViaBuilder

<PageLayout @ref="pageBase" Title="VIA JSON Builder" TargetFiles="@(new[] { "config.h","JSON ファイル"})"
            ValidateFunc="this.Validate" OnUploadFuncAsync="this.OnUpload" OnDownloadFuncAsync="this.OnDownload">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td style="width:100px">Name</td>
                <td style="width:100px"></td>
                <td><input type="text" @bind="@NameTxt" /></td>
            </tr>
            <tr>
                <td>Vendor ID</td>
                <td></td>
                <td><input type="text" @bind="@VendorIdTxt" /></td>
            </tr>
            <tr>
                <td>Product ID</td>
                <td></td>
                <td><input type="text" @bind="@ProductIdTxt" /></td>
            </tr>
            <tr>
                <td>Lighting</td>
                <td></td>
                <td>
                    <select @onchange="OnLightingChanged">
                        @foreach (var item in LightingList)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td>Matrix</td>
                <td>Rows</td>
                <td><input type="number" @bind="@RowsTxt" /></td>
            </tr>
            <tr>
                <td></td>
                <td>Cols</td>
                <td><input type="number" @bind="@ColsTxt" /></td>
            </tr>
            <tr>
                <td>Layouts</td>
                <td>Labels</td>
                <td><textarea style="font-family: monospace; width:100%" rows="1" @bind="@LabelsTxt" /></td>
            </tr>
            <tr>
                <td></td>
                <td valign="top">Keymap</td>
                <td><textarea style="font-family: monospace; width:100%" rows="10" @bind="@KeymapTxt" /></td>
            </tr>
        </tbody>
    </table>
</PageLayout>

@code {
    private PageLayout pageBase;

    private string NameTxt { get; set; }
    private string VendorIdTxt { get; set; }
    private string ProductIdTxt { get; set; }
    private string LightingTxt { get; set; } = Lighting.none.ToString();
    private string RowsTxt { get; set; }
    private string ColsTxt { get; set; }
    private string LabelsTxt { get; set; }
    private string KeymapTxt { get; set; }

    private IEnumerable<string> LightingList = Enum.GetNames(typeof(Lighting));

    private bool Validate(IFileListEntry file)
    {
        var fileName = file.Name;

        return fileName.ToLower().Equals("config.h") || fileName.ToLower().EndsWith(".json");
    }

    private async Task OnUpload(IFileListEntry file)
    {
        var fileName = file.Name;

        using var reader = new StreamReader(file.Data);

        if (fileName.ToLower().Equals("config.h"))
        {
            try
            {
                await this.FillPropertiesAsync(await reader.ReadToEndAsync());
            }
            catch
            {
                this.pageBase.ShowError("解析に失敗しました。手動で入力してください。");
                return;
            }
        }
        else if (fileName.ToLower().EndsWith(".json"))
        {
            this.KeymapTxt = await reader.ReadToEndAsync();
        }
    }

    private async Task FillPropertiesAsync(string target)
    {
        await Task.Run(() =>
        {
            var info = this.Extractor.Extract(target);

            this.NameTxt = info.Name;
            this.VendorIdTxt = info.VendorId;
            this.ProductIdTxt = info.ProductId;
            this.RowsTxt = info.Rows;
            this.ColsTxt = info.Cols;
        });
    }

    private async ValueTask OnDownload()
    {
        var context = new JsonBuildingContext
        {
            Name = this.NameTxt,
            VendorId = this.VendorIdTxt,
            ProductId = this.ProductIdTxt,
            Lighting = this.LightingTxt,
            Rows = this.RowsTxt,
            Cols = this.ColsTxt,
            Labels = this.LabelsTxt,
            Keymap = this.KeymapTxt,
        };

        var json = this.ViaBuilder.Build(context);

        await this.BlazorDownloadFileService.DownloadFileFromText($"{this.NameTxt.ToLower().Replace(" ", "_")}.json", json, "application/octet-stream");
    }

    private void OnLightingChanged(ChangeEventArgs e)
    {
        this.LightingTxt = e.Value.ToString();
    }
}
