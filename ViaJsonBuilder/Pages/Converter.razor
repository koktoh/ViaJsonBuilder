@page "/converter"
@inject ClipboardService Clipboard
@inject ISessionStorageService SessionStorage
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject KeymapBuilder KeymapBuilder

<PageLayout @ref="pageBase" Title="Keymap Converter" TargetFiles="@(new[] { "<keyboard>.h","info.json"})"
            ValidateFunc="this.Validate" OnUploadFuncAsync="this.OnUpload" OnDownloadFuncAsync="this.OnDownload" OnCopyClipboard="this.OnCopyClipboard">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td>
                    <textarea style="font-family: monospace; width:100%" rows="10" @bind="@this.Context.LayoutDefinition" />
                </td>
                <td>
                    <textarea style="font-family: monospace; width:100%" rows="10" @bind="@this.Context.QmkConfJson" />
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <button class="btn btn-primary mr-md-5" @onclick="this.Convert"><span class="oi oi-loop-square" /> コンバート</button>
                    @foreach (var item in Enum.GetNames(typeof(ConvertKind)))
                    {
                        <span class="ml-md-2"><input type="radio" name="convert_type" value="@item" @onchange="this.OnRadioChangedAsync" checked="@(this.CompareRadioValue(item))" /> @this.DisplayStrDict[item]</span>
                    }
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <textarea style="font-family: monospace; width:100%" rows="10" value="@this.Keymap" @onchange="this.OnKeymapChangedAsync" />
                </td>
            </tr>
        </tbody>
    </table>
</PageLayout>

@code {
    private PageLayout pageBase;

    private readonly IReadOnlyDictionary<string, string> DisplayStrDict = new Dictionary<string, string>
    {
        { ConvertKind.VIA.ToString(), "VIA" },
        { ConvertKind.KLE.ToString(), "Plane KLE" },
    };

    private KleContext Context = new KleContext
    {
        ConvertKind = ConvertKind.VIA,
    };

    private string Keymap { get; set; }

    private bool Validate(IFileListEntry file)
    {
        var fileName = file.Name;

        return fileName.ToLower().EndsWith(".h") || fileName.ToLower().Equals("info.json");
    }

    private async Task OnUpload(IFileListEntry file)
    {
        var fileName = file.Name;

        using var reader = new StreamReader(file.Data);

        if (fileName.ToLower().EndsWith(".h"))
        {
            this.Context.LayoutDefinition = await reader.ReadToEndAsync();
        }
        else if (fileName.ToLower().Equals("info.json"))
        {
            this.Context.QmkConfJson = await reader.ReadToEndAsync();
        }

        await this.SaveSessionStorageAsync();
    }

    private async ValueTask OnDownload()
    {
        if (this.Keymap.IsNullOrWhiteSpace())
        {
            return;
        }

        await this.BlazorDownloadFileService.DownloadFileFromText("kle.json", this.Keymap, "application/octet-stream");
    }

    private async Task Convert()
    {
        this.pageBase.ResetError();
        this.Keymap = string.Empty;

        if (this.Context.LayoutDefinition.IsNullOrWhiteSpace())
        {
            return;
        }

        await Task.Run(async () =>
        {
            var context = new JsonBuildingContext
            {
                KleContext = this.Context,
            };

            try
            {
                var json = this.KeymapBuilder.Build(context);

                if (json.IsNullOrWhiteSpace())
                {
                    this.pageBase.ShowError("LAYOUT 定義が見つかりません。");
                    return;
                }

                this.Keymap = json;
            }
            catch
            {
                this.pageBase.ShowError("JSON への変換に失敗しました。");
                return;
            }
            finally
            {
                await this.SaveSessionStorageAsync();
            }
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.LoadSessionStorageAsync();
    }

    private async Task OnRadioChangedAsync(ChangeEventArgs e)
    {
        if (Enum.TryParse<ConvertKind>(e.Value.ToString(), out var result))
        {
            this.Context.ConvertKind = result;
            await this.SaveSessionStorageAsync();
        }
    }

    private async Task OnKeymapChangedAsync(ChangeEventArgs e)
    {
        this.Keymap = e.Value.ToString();
        await this.SaveSessionStorageAsync();
    }

    private bool CompareRadioValue(string value)
    {
        if (Enum.TryParse<ConvertKind>(value, out var result))
        {
            return this.Context.ConvertKind == result;
        }

        return false;
    }

    private async Task LoadSessionStorageAsync()
    {
        this.Context = await this.SessionStorage.GetItemAsync<KleContext>(nameof(KleContext));
        this.Keymap = await this.SessionStorage.GetItemAsync<string>(nameof(this.Keymap));
    }

    private async Task SaveSessionStorageAsync()
    {
        await this.SessionStorage.SetItemAsync(nameof(KleContext), this.Context);
        await this.SessionStorage.SetItemAsync(nameof(this.Keymap), this.Keymap);
    }

    private async Task OnCopyClipboard()
    {
        this.pageBase.ResetError();

        try
        {
            await this.Clipboard.WriteTextAsync(this.Keymap);
        }
        catch
        {
            this.pageBase.ShowError("クリップボードへのコピーに失敗しました。ダウンロードを使用してください。");
        }
    }

}
