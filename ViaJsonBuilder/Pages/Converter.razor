@page "/converter"
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject KeymapBuilder KeymapBuilder

<PageLayout @ref="pageBase" Title="Keymap Converter" TargetFiles="@(new[] { "<keyboard>.h","info.json"})"
            ValidateFunc="this.Validate" OnUploadFuncAsync="this.OnUpload" OnDownloadFuncAsync="this.OnDownload">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td>
                    <textarea style="font-family: monospace; width:100%" rows="10" @bind="@this.Context.LayoutDefinition" />
                </td>
                <td>
                    <textarea style="font-family: monospace; width:100%" rows="10" @bind="@this.Context.QmkConfJson" />
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="this.Convert"><span class="oi oi-loop-square" /> コンバート</button>
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <textarea style="font-family: monospace; width:100%" rows="10" @bind="@DestTxt" />
                </td>
            </tr>
        </tbody>
    </table>
</PageLayout>

@code {
    private PageLayout pageBase;

    private string DestTxt { get; set; }

    private KleContext Context = new KleContext();

    private bool Validate(IFileListEntry file)
    {
        var fileName = file.Name;

        return fileName.ToLower().EndsWith(".h") || fileName.ToLower().Equals("info.json");
    }

    private async Task OnUpload(IFileListEntry file)
    {
        var fileName = file.Name;

        using var reader = new StreamReader(file.Data);

        if (fileName.ToLower().EndsWith(".h"))
        {
            this.Context.LayoutDefinition = await reader.ReadToEndAsync();
        }
        else if (fileName.ToLower().Equals("info.json"))
        {
            this.Context.QmkConfJson = await reader.ReadToEndAsync();
        }
    }

    private async ValueTask OnDownload()
    {
        if (this.DestTxt.IsNullOrWhiteSpace())
        {
            return;
        }

        await this.BlazorDownloadFileService.DownloadFileFromText("kle.json", this.DestTxt, "application/octet-stream");
    }

    private async Task Convert()
    {
        this.pageBase.ResetError();
        this.DestTxt = string.Empty;

        if (this.Context.LayoutDefinition.IsNullOrWhiteSpace())
        {
            return;
        }

        await Task.Run(() =>
        {
            var context = new JsonBuildingContext
            {
                KleContext = this.Context,
            };

            try
            {
                var json = this.KeymapBuilder.Build(context);

                if (json.IsNullOrWhiteSpace())
                {
                    this.pageBase.ShowError("LAYOUT 定義が見つかりません。");
                    return;
                }

                this.DestTxt = json;
            }
            catch
            {
                this.pageBase.ShowError("JSON への変換に失敗しました。");
                return;
            }
        });
    }
}
